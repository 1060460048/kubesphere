apiVersion: v1
kind: Namespace
metadata:
  labels:
    control-plane: network-manager
  name: network-system
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: network-manager
  namespace: network-system
  labels:
    control-plane: network-manager
spec:
  selector:
    matchLabels:
      control-plane: network-manager
  replicas: 1
  template:
    metadata:
      labels:
        control-plane: network-manager
    spec:
      nodeSelector:
        node-role.kubernetes.io/master: ""
      hostNetwork: true
      tolerations:
        - key: "CriticalAddonsOnly"
          operator: "Exists"
        - key: "node-role.kubernetes.io/master"
          effect: NoSchedule
      containers:
      - command:
        - /ks-network
        args:
          - -v=4
          - np-provider=calico
        image: network:latest
        imagePullPolicy: Always
        name: manager
        resources:
          limits:
            cpu: 100m
            memory: 30Mi
          requests:
            cpu: 100m
            memory: 20Mi
        volumeMounts:
        - mountPath: /calicocerts
          name: etcd-certs
          readOnly: true
      terminationGracePeriodSeconds: 10
      volumes:
      - name: etcd-certs
        secret:
          secretName: calico-etcd-secrets
          defaultMode: 0400

---
apiVersion: v1
kind: Secret
type: Opaque
metadata:
  name: calico-etcd-secrets
  namespace: network-system
data:
  # Populate the following with etcd TLS configuration if desired, but leave blank if
  # not using TLS for etcd.
  # The keys below should be uncommented and the values populated with the base64
  # encoded contents of each file that would be associated with the TLS data.
  # Example command for encoding a file contents: cat <file> | base64 -w 0
  etcd-ca: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUN3akNDQWFxZ0F3SUJBZ0lCQURBTkJna3Foa2lHOXcwQkFRc0ZBREFTTVJBd0RnWURWUVFERXdkbGRHTmsKTFdOaE1CNFhEVEU1TURnd09EQXlNelF6TTFvWERUSTVNRGd3TlRBeU16UXpNMW93RWpFUU1BNEdBMVVFQXhNSApaWFJqWkMxallUQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQU12UUFqODhZRVlpClpZY0Q0QzJWWFNLNmJRMzd3STRkWE5kQ1EvN09CU3BuVmJpNWcrZEgvU3JhY2lHUUs2YU4vM3FJM21DNHcvUWEKS2s1NjJMKzhiY2RTV2tUejFYSVZwS0p0a1RUL0pYcy9DaXdDdEErTEZkendZMHNwL3h2bUIwQzc1YzB5ajVXcQpHaHVqRE1VS29PSlhaV3NhK1NCRDVKVFlXVEVOeGZ6VlQxYllEWHdUNXMzd2RQc2VjR3VQMjZUSGlEM0duUndoCkJqNGRKQ2g2VGpxdEg4cVh6L01lMUNFaDBIb2p2dGpiT3Bsd2VEeXNLampDNUIxT09nZHdWK0J2cnI2VDU5a04KNzJEVGxJN1p5cktqTldUNCtuRDZ0SGRRa21nallTZ3JVMFNOZzFoWGpmMk54OEJpakp0eGZ2MlV5TWQyNFNkWgpFSVNSMytUcmVUTUNBd0VBQWFNak1DRXdEZ1lEVlIwUEFRSC9CQVFEQWdLa01BOEdBMVVkRXdFQi93UUZNQU1CCkFmOHdEUVlKS29aSWh2Y05BUUVMQlFBRGdnRUJBSTNCeGk3NEdvWmdlYUVlT1NSOEpQSjRVS1NJTW1UQmxkUTYKaCtmWmoyK3BGMlFGRXhidzNwODhoQndKeEl4dWZ5MXRieityck9mN3RUMXhGUlZQZkxSU1l2b01xekhYa1h0cgpVSmtEWjhaeWJTTnh1eGZHWXdyaEl4U05GWTI5RnduUFJGY0tCYmNudWJlcWxXT0czWXl3RkZjRWJNdlhiTlRiCklTSGQ2VkZPbVZCZEFoUysrNEZ0NWI0QzR3Zjd6c1YzYVFrNVhIdndhV3RXQUJKaEdwVEZ4VUp3SkM1VmllY3UKaG5FMG9jY2FYSThoVEZqMENUSTZyK09rL0FLTzJRK2V0MnFPUnJPUlkyRGxWakd1aE5mUENsUTJVRlVRV29aaApYcHZEeWVYN0RxeVdyWnpPMDhSU2pybDhzWTdBcTlXTDJnWEd3L253Zis5QWlicmpIems9Ci0tLS0tRU5EIENFUlRJRklDQVRFLS0tLS0K
  etcd-cert: LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSUMrVENDQWVHZ0F3SUJBZ0lJTTV6T0ZXLzZzbll3RFFZSktvWklodmNOQVFFTEJRQXdFakVRTUE0R0ExVUUKQXhNSFpYUmpaQzFqWVRBZUZ3MHhPVEE0TURnd01qTTBNek5hRncweU1EQTRNRGN3TWpNME16VmFNRDR4RnpBVgpCZ05WQkFvVERuTjVjM1JsYlRwdFlYTjBaWEp6TVNNd0lRWURWUVFERXhwcmRXSmxMV0Z3YVhObGNuWmxjaTFsCmRHTmtMV05zYVdWdWREQ0NBU0l3RFFZSktvWklodmNOQVFFQkJRQURnZ0VQQURDQ0FRb0NnZ0VCQUxmcWxqdGwKT2E1OUZrS0JrYzIyUDgwV3RMbkppeHB2eDJwSVZ1L3pJeE9YdERkNy9GUldsaW9iSmltZm5zdjd2Y0dUaXpvKwovZ2crV2RtdDNma294TVNlTndLenNvdGxEU1liNjJDRkV6bVlocWt6cjVRN2l5MHIyU1ZhV0lzUUJyNVNxczc0ClA4aUxQbjR6NmFjV3RCU2E5ZWVnOXRWQ3JxRUVpNFNtT25qMzNiekhEVVpUWDBDNitZTEdxSkxZT3JPNSs1STAKMmdmVmgvV0NIZ0YzWU9VRE5VU2Y3RXJlUFpRTUpGUUhvVDhaWWViOWxvNXozTHZTUEZVSVo4QkluQXFRbkw1QwpkZitVV1dYN2pvNVFUVC8zeUcxRkNGM2hBeXFDYlFoKzJPNjd4TjFPOTNlYWV1TXBESXNwWm9LS2VraDF1WHFYCjZtUjVXVTVISnZvRjJmTUNBd0VBQWFNbk1DVXdEZ1lEVlIwUEFRSC9CQVFEQWdXZ01CTUdBMVVkSlFRTU1Bb0cKQ0NzR0FRVUZCd01DTUEwR0NTcUdTSWIzRFFFQkN3VUFBNElCQVFCU3pTaXBKaEFUZTNuNlk3QzUraXNhN3Y0UwphaStIRS9JYlZZcFFUY3c4YzVZTktlNVF1WmpaeVVuR2NUTzdxWmozUjVkSG9MLzNFSG9LRndqdGFSTUw0NENvCjNQaFhLOTRmWnNSTTJXWFdsVDU5dlNvUEhyaUV2MDQ4a2ZwZEV4ckVDUXZWRTlqM0R0ZytObk5qcGxOa1RSeWYKeExFaFpaM3VxRVpRS2VSU3Y2WWxySFZaTFNCQnZtMFZDNW0xNzIwV0NseWh2RUVTUFNnNnZFK3ROSXpNU2srWQpBOVNOQzVwNksvME9pQ2p2TGQyZ3RsZVhWOUdsOEU0b005VHZ5d2JuODFvNUtQZ0cyNTZUSjRHZHlQRDJ3TWlqCkFkWGR2MzBxTStHWHRQRC9RUFpSYWc2UjdKK09Nb0xKNUZ0YWxUWXJkR2lwdDJQOVV4VzFET1hmZms3UQotLS0tLUVORCBDRVJUSUZJQ0FURS0tLS0tCg==
  etcd-key: LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcEFJQkFBS0NBUUVBdCtxV08yVTVybjBXUW9HUnpiWS96UmEwdWNtTEdtL0hha2hXNy9NakU1ZTBOM3Y4ClZGYVdLaHNtS1orZXkvdTl3Wk9MT2o3K0NENVoyYTNkK1NqRXhKNDNBck95aTJVTkpodnJZSVVUT1ppR3FUT3YKbER1TExTdlpKVnBZaXhBR3ZsS3F6dmcveUlzK2ZqUHBweGEwRkpyMTU2RDIxVUt1b1FTTGhLWTZlUGZkdk1jTgpSbE5mUUxyNWdzYW9rdGc2czduN2tqVGFCOVdIOVlJZUFYZGc1UU0xUkovc1N0NDlsQXdrVkFlaFB4bGg1djJXCmpuUGN1OUk4VlFobndFaWNDcENjdmtKMS81UlpaZnVPamxCTlAvZkliVVVJWGVFREtvSnRDSDdZN3J2RTNVNzMKZDVwNjR5a01peWxtZ29wNlNIVzVlcGZxWkhsWlRrY20rZ1haOHdJREFRQUJBb0lCQUhrRmg4Z2J5d0lUMDdMOQp1ZWpvdFVFS1lQQWtQRUd3TGtPMHlHaHEwTGtTeVliOU1rUjVHYVVwYWtwWGU5SDBuS0FscTZjdlRsQTBYMEdMClZKYWhDaUhyam4xYnEvQm9GV2Z2VlVxVkp0cHVrS1lFbWRQci9xQkJ5MGoyRTIrbW94bFlJb2ZBK1kvSWVOM28KNFNhUEhQNjJIWHhIQWtYQTlGS0dRQnlRbWNlQkM4c3hKUGxoOTI1U0gzRzdBV1FGQlNrbXlGNXYybU9vaTcxVwpxcHdZS0JVbkQwekFOZDd6MStNUlpPcDIzMTBTeXJVRk05RUZoYURhM1F6eGFReHQzWXAyOHRzR05ETWJQQXJLCjM2eDhZdi9ZYkJYRTc2bTZhSUZiRndpVlp4dUtIeHlaN3RQblZralMzRkFSUDhFNmx5MFpOdWFlRTBnVlowRGIKYytldEF2a0NnWUVBd1N0MlFUVmF6dDhhbmZMV3lXTnFkU3AwU0hVeUREeXVrU0hhK01HclVuUjZHMGNsQmFlbgpTR3hYVkE1MU4wTnhXZ3lKcHhsTFNERDd3OSszRU43WnZBQjEybmtuUTY4VWZQQUhFL2xoZWNsU01YUjQybUgzCnA2ajR4ajBYdzloQ0sxcEVBSFFaWE5pcERtMHhRbmtsdTQ4N0U3Y2sydSs2NW5xVDJqRzQ5bmNDZ1lFQTg3eWcKY1V4VmFHTWpDSWgxNnNwYko0OXBJVVBGOGxpSks3c3M2Q3c0aGEzSTVVRDQxWnNFdUdMc3F1djlVSTc0RHU0dwovbE9hM0ZoQ0ZzdnBxY05pYU1SSkhPMmhLNGNKK29XTXl6a3RISzM0VXNzSStGS09ia2loSTQ3cWNuUUVTN3l0CmJOWkU4TTVVVjd5ZUlYZ3E0ZFVQejhsOG16OVdhSHdIcVVBV2kyVUNnWUE0My9NUmdBUWNwTlBSYlk2UC9SVjcKS2VUUzhLNnJxN0k2U1IyUDRIWHc4UnFDclkvWSttUG1qdituWUJwakN4aDB5dnc4bHRYemkzaVZVMmt6TG1vdApVSFZpdmdreGhIc2p6Z2hIZVVXWjlneWRRdzNTUHNZTU4xUUlDalRWRlBkbWpFMDVWUFdpd0tnRjkyQnBrZ0hxCkYySHRqQjd0MTJmUU5JY1QxMC8rUVFLQmdRQ0RPRk1jakI4VEl3UlNiTDBuR2FoM3BPTFJrTjQ1K2Vabmo4NisKZEVnOTEvRG5VOUpqbGFDMThEUkFWT3E4K3l1YlJpdEVVUmgzZG1DbVMwUFNMS21IZzkxazRKNDdnK2tnWWRRSgorUTlMZUhIUGlSV2NNejRSSzdMdEpOMGRuMDVNeEJpT0Z0Rm8zM3hTKys0YVVNcXRhSHFwd0cwQVc5b1dTR2dMCmU4Qm5iUUtCZ1FDNzd0ZndDNVl0QTRSR2pISjdmNURFMDZHa2F1QXpJTS83djZBTWxGZWVzcXl6OHpnNHc5SXgKZEk1RFJkcjBhRm5ISHNjeE82Ty9PU09OYkk2UHMrT0RNa3JLeWIyTkdMT0RlV1k0UWQ5RUNxZzVkcHdCcHhZWApMdldDWTFBc0lWVFM2eklQb284aWpCTFI1RjVUdEEyTTZaWEZwRDJUalN5VC9GbWJUWnh1ckE9PQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo=